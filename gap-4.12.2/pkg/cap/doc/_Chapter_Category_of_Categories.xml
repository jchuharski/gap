<?xml version="1.0" encoding="UTF-8"?>

<!-- This is an automatically generated file. -->
<Chapter Label="Chapter_Category_of_Categories">
<Heading>Category of Categories</Heading>

<P/>
  Categories itself with functors as morphisms form a category Cat.
  So the data structure of <C>CapCategory</C>s is designed to be objects in a
  category. This category is implemented in <C>CapCat</C>.
  For every category, the corresponding object in Cat can be obtained via <C>AsCatObject</C>.
  The implemetation of the category of categories offers a data structure for functors.
  Those are implemented as morphisms in this category, so functors can be handled like
  morphisms in a category. Also convenience functions to install functors as methods are
  implemented (in order to avoid <C>ApplyFunctor</C>).
<Section Label="Chapter_Category_of_Categories_Section_The_Category_Cat">
<Heading>The Category Cat</Heading>

<ManSection>
  <Var Name="CapCat" />
 <Description>
  This variable stores the category of categories. Every category object is
  constructed as an object in this category, so Cat is constructed when loading
  the package. 
 </Description>
</ManSection>


</Section>


<Section Label="Chapter_Category_of_Categories_Section_Categories">
<Heading>Categories</Heading>

<ManSection>
  <Filt Arg="object" Name="IsCapCategoryAsCatObject" Label="for IsCapCategoryObject"/>
 <Returns><K>true</K> or <K>false</K>
</Returns>
 <Description>
  The GAP category of CAP categories seen as object in Cat.
 </Description>
</ManSection>


<ManSection>
  <Filt Arg="object" Name="IsCapFunctor" Label="for IsCapCategoryMorphism"/>
 <Returns><K>true</K> or <K>false</K>
</Returns>
 <Description>
  The GAP category of functors.
 </Description>
</ManSection>


<ManSection>
  <Filt Arg="object" Name="IsCapNaturalTransformation" Label="for IsCapCategoryTwoCell"/>
 <Returns><K>true</K> or <K>false</K>
</Returns>
 <Description>
 The GAP category of natural transformations.
 </Description>
</ManSection>


</Section>


<Section Label="Chapter_Category_of_Categories_Section_Constructors">
<Heading>Constructors</Heading>

<ManSection>
  <Attr Arg="C" Name="AsCatObject" Label="for IsCapCategory"/>
 <Description>
  Given a CAP category <Math>C</Math>, this method returns the corresponding object in Cat.
  For technical reasons, the filter <C>IsCapCategory</C> must not imply the filter <C>IsCapCategoryObject</C>.
  For example, if <C>InitialObject</C> is applied to an object, it returns the initial object of its category. If it is
  applied to a category, it returns the initial object of the category. If a CAP category would be
  a category object itself, this would be ambiguous.
  So categories must be wrapped in a CatObject to be an object in Cat.
  This method returns the wrapper object. The category can be reobtained by <C>AsCapCategory</C>.
 </Description>
</ManSection>


<ManSection>
  <Attr Arg="C" Name="AsCapCategory" Label="for IsCapCategoryAsCatObject"/>
 <Description>
  For an object <Math>C</Math> in Cat, this method returns the underlying CAP category. This method is inverse to <C>AsCatObject</C>, i.e.
  AsCapCategory( AsCatObject( A ) ) = A.
 </Description>
</ManSection>


</Section>


<Section Label="Chapter_Category_of_Categories_Section_Functors">
<Heading>Functors</Heading>

  Functors are morphisms in Cat, thus they have source and target which are categories.
  A multivariate functor can be constructed via a product category as source,
  a presheaf is constructed via the opposite category as source.
  However, the user can explicitly decide the arity of a functor (which will only have technical implications).
  Thus, it is for example possible to consider a functor <Math>A \times B \rightarrow C</Math>
  either as a unary functor with source category <Math>A \times B</Math> or as a binary functor.
  Moreover, an object and a morphism function can be added to a functor, to apply it
  to objects or morphisms in the source category.
<ManSection Label="AutoDoc_generated_group7">
  <Oper Arg="name, A, B" Name="CapFunctor" Label="for IsString, IsCapCategory, IsCapCategory"/>
  <Oper Arg="name,A,B" Name="CapFunctor" Label="for IsString, IsCapCategoryAsCatObject, IsCapCategory"/>
  <Oper Arg="name,A,B" Name="CapFunctor" Label="for IsString, IsCapCategory, IsCapCategoryAsCatObject"/>
  <Oper Arg="name,A,B" Name="CapFunctor" Label="for IsString, IsCapCategoryAsCatObject, IsCapCategoryAsCatObject"/>
 <Description>
  These methods construct a unary CAP functor.
  The first argument is a string for the functor's name.
  <A>A</A> and <A>B</A> are the source and target of the functor,
  and they can be given as objects in <C>CapCat</C> or as a CAP-category.
<P/>
 </Description>
</ManSection>


<ManSection Label="AutoDoc_generated_group8">
  <Oper Arg="name, list, B" Name="CapFunctor" Label="for IsString, IsList, IsCapCategory"/>
  <Oper Arg="name, list, B" Name="CapFunctor" Label="for IsString, IsList, IsCapCategoryAsCatObject"/>
 <Description>
  These methods construct a possible multivariate CAP functor.
  The first argument is a string for the functor's name.
  The second argument is a list
  encoding the input signature of the functor.
  It can be given as a list of pairs
  <Math>[ [ A_1, b_1 ], \dots, [ A_n, b_n ] ]</Math>
  where a pair consists of a category <Math>A_i</Math> (given as an object in <C>CapCat</C> or as a CAP-category)
  and a boolean <Math>b_i</Math> for <Math>i = 1, \dots, n</Math>. Instead of a pair
  <Math>[ A_i, b_i ]</Math>, you can also give simply <Math>A_i</Math>, which will be interpreted as
  the pair <Math>[ A_i, \mathtt{false} ]</Math>.
  The third argument is the target <A>B</A> of the functor,
  and it can be given as an object in <C>CapCat</C> or as a CAP-category.
  The output is a functor
  with source given by the product category <Math>D_1 \times ... \times D_n</Math>,
  where <Math>D_i = A_i</Math> if <Math>b_i = \mathtt{false}</Math>, and <Math>D_i = A_i^{\mathrm{op}}</Math> otherwise.
<P/>
 </Description>
</ManSection>


<ManSection>
  <Attr Arg="F" Name="SourceOfFunctor" Label="for IsCapFunctor"/>
 <Description>
 The argument is a functor <Math>F</Math>. The output is its source as CAP category.
 </Description>
</ManSection>


<ManSection>
  <Attr Arg="F" Name="RangeOfFunctor" Label="for IsCapFunctor"/>
 <Description>
 The argument is a functor <Math>F</Math>. The output is its range as CAP category.
 </Description>
</ManSection>


<ManSection>
  <Oper Arg="F, f" Name="AddObjectFunction" Label="for IsCapFunctor, IsFunction"/>
 <Description>
  This operation adds a function <Math>f</Math> to the functor <Math>F</Math> which can then be applied to
  objects in the source. The given function <Math>f</Math> has to take 
  arguments according to the <C>InputSignature</C> of <Math>F</Math>, i.e., if the input signature is
  given by
  <Math>[ [A_1, b_1], \dots, [A_n,b_n] ]</Math>,
  then <Math>f</Math> must take <Math>n</Math> arguments, where the <Math>i</Math>-th
  argument is an object in the category <Math>A_i</Math> (the boolean <Math>b_i</Math> is ignored).
  The function should return an object in the range of the functor, except when
  the automatic call of <C>AddObject</C> was enabled via <C>EnableAddForCategoricalOperations</C>.
  In this case the output only has to be a GAP object in <C>IsAttributeStoringRep</C>,
  which will be automatically added as an object to the range of the functor.
 </Description>
</ManSection>


<ManSection>
  <Attr Arg="F" Name="FunctorObjectOperation" Label="for IsCapFunctor"/>
 <Returns>a GAP operation
</Returns>
 <Description>
 The argument is a functor <Math>F</Math>.
 The output is the GAP operation
 realizing the action of <Math>F</Math> on objects.
 </Description>
</ManSection>


<ManSection>
  <Oper Arg="F, f" Name="AddMorphismFunction" Label="for IsCapFunctor, IsFunction"/>
 <Description>
  This operation adds a function <Math>f</Math> to the functor <Math>F</Math> which can then be applied to
  morphisms in the source. The given function <Math>f</Math> has to take
  as its first argument an object <Math>s</Math> that is equal (via <C>IsEqualForObjects</C>)
  to the source of the result of applying
  <Math>F</Math> to the input morphisms.
  The next arguments of <Math>f</Math> have to morphisms according to
  the <C>InputSignature</C> of <Math>F</Math>, i.e., if the input signature is
  given by
  <Math>[ [A_1, b_1], \dots, [A_n,b_n] ]</Math>,
  then <Math>f</Math> must take <Math>n</Math> arguments, where the <Math>i</Math>-th
  argument is a morphism in the category <Math>A_i</Math> (the boolean <Math>b_i</Math> is ignored).
  The last argument of <Math>f</Math> must be an object <Math>r</Math> that is equal (via <C>IsEqualForObjects</C>)
  to the range of the result of applying
  <Math>F</Math> to the input morphisms.
  The function should return a morphism in the range of the functor, except when
  the automatic call of <C>AddMorphism</C> was enabled via <C>EnableAddForCategoricalOperations</C>.
  In this case the output only has to be a GAP object in <C>IsAttributeStoringRep</C>
  (with attributes <C>Source</C> and <C>Range</C> containing also GAP objects in <C>IsAttributeStoringRep</C>),
  which will be automatically added as a morphism to the range of the functor.
 </Description>
</ManSection>


<ManSection>
  <Attr Arg="F" Name="FunctorMorphismOperation" Label="for IsCapFunctor"/>
 <Returns>a GAP operation
</Returns>
 <Description>
 The argument is a functor <Math>F</Math>.
 The output is the GAP operation
 realizing the action of <Math>F</Math> on morphisms.
 </Description>
</ManSection>


<ManSection Label="AutoDoc_generated_group9">
  <Func Arg="func, A[, B, ...]" Name="ApplyFunctor" />
 <Returns>IsCapCategoryCell
</Returns>
 <Description>
  Applies the functor <A>func</A> either to
<List>
<Item>
an object or morphism <A>A</A> in the source of <A>func</A> or
</Item>
<Item>
to objects or morphisms belonging to the categories
     in the input signature of <A>func</A>.
</Item>
</List>
 </Description>
</ManSection>


<ManSection>
  <Attr Arg="F" Name="InputSignature" Label="for IsCapFunctor"/>
 <Returns>IsList
</Returns>
 <Description>
 The argument is a functor <Math>F</Math>.
 The output is a list of pairs
  <Math>[ [ A_1, b_1 ], \dots, [ A_n, b_n ] ]</Math>
  where a pair consists of a CAP-category <Math>A_i</Math>
  and a boolean <Math>b_i</Math> for <Math>i = 1, \dots, n</Math>.
 The source of <Math>F</Math> is given by the product category <Math>D_1 \times ... \times D_n</Math>,
  where <Math>D_i = A_i</Math> if <Math>b_i = \mathtt{false}</Math>, and <Math>D_i = A_i^{\mathrm{op}}</Math> otherwise.
 </Description>
</ManSection>


<ManSection>
  <Oper Arg="F, s" Name="InstallFunctor" Label="for IsCapFunctor, IsString"/>
 <Returns>nothing
</Returns>
 <Description>
 The arguments are a functor <Math>F</Math> and a string <Math>s</Math>.
 To simplify the description of this operation, we let
 <Math>[ [ A_1, b_1 ], \dots, [ A_n, b_n ] ]</Math>
 denote the input signature of <Math>F</Math>.
 This method tries to install <Math>3</Math> operations:
 an operation <Math>\omega_1</Math> with the name <Math>s</Math>, an operation <Math>\omega_2</Math> with 
 the name <Math>s\mathtt{OnObjects}</Math>,
 and an operation <Math>\omega_3</Math> with the name <Math>s\mathtt{OnMorphisms}</Math>.
 The operation <Math>\omega_1</Math>
 takes as input either <Math>n</Math>- objects/morphisms in <Math>A_i</Math>
 or a single object/morphism in the source of <Math>F</Math>,
 and outputs the result of applying <Math>F</Math> to this input.
 <Math>\omega_2</Math> and <Math>\omega_3</Math> are the corresponding variants for objects or morphisms only.
 This function can only be called once for each functor, every further call will be ignored.
 </Description>
</ManSection>


<ManSection>
  <Attr Arg="cat" Name="IdentityFunctor" Label="for IsCapCategory"/>
 <Returns>a functor
</Returns>
 <Description>
  Returns the identity functor of the
  category <A>cat</A> viewed as an object
  in the category of categories.
 </Description>
</ManSection>


<ManSection>
  <Attr Arg="cat" Name="FunctorCanonicalizeZeroObjects" Label="for IsCapCategory"/>
 <Returns>a functor
</Returns>
 <Description>
  Returns the endofunctor of the
  category <A>cat</A> with zero which maps each
  (object isomorphic to the) zero object
  to <C>ZeroObject</C>(<A>cat</A>) and to itself otherwise.
  This functor is equivalent to the identity functor.
 </Description>
</ManSection>


<ManSection>
  <Attr Arg="cat" Name="NaturalIsomorphismFromIdentityToCanonicalizeZeroObjects" Label="for IsCapCategory"/>
 <Returns>a natural transformation
</Returns>
 <Description>
  Returns the natural isomorphism from the identity functor
  to <C>FunctorCanonicalizeZeroObjects</C>(<A>cat</A>).
 </Description>
</ManSection>


<ManSection>
  <Attr Arg="cat" Name="FunctorCanonicalizeZeroMorphisms" Label="for IsCapCategory"/>
 <Returns>a functor
</Returns>
 <Description>
  Returns the endofunctor of the
  category <A>cat</A> with zero which maps each
  object to itself, each morphism <M>\phi</M> to itself, unless
  it is congruent to the zero morphism; in this case it is mapped to
  <C>ZeroMorphism</C>(<C>Source</C>(<M>\phi</M>), <C>Range</C>(<M>\phi</M>)).
  This functor is equivalent to the identity functor.
 </Description>
</ManSection>


<ManSection>
  <Attr Arg="cat" Name="NaturalIsomorphismFromIdentityToCanonicalizeZeroMorphisms" Label="for IsCapCategory"/>
 <Returns>a natural transformation
</Returns>
 <Description>
  Returns the natural isomorphism from the identity functor
  to <C>FunctorCanonicalizeZeroMorphisms</C>(<A>cat</A>).
 </Description>
</ManSection>


</Section>


<Section Label="Chapter_Category_of_Categories_Section_Natural_transformations">
<Heading>Natural transformations</Heading>

 Natural transformations form the <Math>2</Math>-cells
 of Cat. As such, it is possible to compose them
 vertically and horizontally, see Section
 <Ref Sect="Section_id2cellsandcomp" />.
<ManSection>
  <Attr Arg="arg" Name="Name" Label="for IsCapNaturalTransformation"/>
 <Returns>a string
</Returns>
 <Description>
  As every functor, every natural transformation has a name attribute.
  It has to be a string and will be set by the Constructor.
 </Description>
</ManSection>


<ManSection Label="AutoDoc_generated_group10">
  <Oper Arg="[name,],F,G" Name="NaturalTransformation" Label="for IsCapFunctor, IsCapFunctor"/>
 <Returns>a natural transformation
</Returns>
 <Description>
  Constructs a natural transformation between the functors <A>F</A><Math>:A \rightarrow B</Math>
  and <A>G</A><Math>:A \rightarrow B</Math>. The string <A>name</A> is optional, and, if not given,
  set automatically from the names of the functors
 </Description>
</ManSection>


<ManSection Label="AutoDoc_generated_group11">
  <Oper Arg="N, func" Name="AddNaturalTransformationFunction" Label="for IsCapNaturalTransformation, IsFunction"/>
 <Description>
  Adds the function (or list of functions) <A>func</A> to the natural transformation <A>N</A>.
  The function or each function in the list should take three arguments. If <Math>N: F \rightarrow G</Math>,
  the arguments should be <Math>F(A), A, G(A)</Math>. The ouptput should be a morphism, <Math>F(A) \rightarrow G(A)</Math>.
 </Description>
</ManSection>


<ManSection>
  <Func Arg="N, A" Name="ApplyNaturalTransformation" />
 <Returns>a morphism
</Returns>
 <Description>
  Given a natural transformation <A>N</A><Math>:F \rightarrow G</Math> and an object <A>A</A>,
  this function should return the morphism <Math>F(A) \rightarrow G(A)</Math>, corresponding to
  <A>N</A>.
 </Description>
</ManSection>


<ManSection>
  <Oper Arg="N, name" Name="InstallNaturalTransformation" Label="for IsCapNaturalTransformation, IsString"/>
 <Description>
  Installs the natural transformation <A>N</A> as operation with the name <A>name</A>.
  Argument for this operation is an object, output is a morphism.
 </Description>
</ManSection>


<ManSection>
  <Oper Arg="N,F" Name="HorizontalPreComposeNaturalTransformationWithFunctor" Label="for IsCapNaturalTransformation, IsCapFunctor"/>
 <Returns>a natural transformation
</Returns>
 <Description>
  Computes the horizontal composition of the natural transformation <A>N</A> and
  the functor <A>F</A>.
 </Description>
</ManSection>


<ManSection>
  <Oper Arg="F,N" Name="HorizontalPreComposeFunctorWithNaturalTransformation" Label="for IsCapFunctor, IsCapNaturalTransformation"/>
 <Returns>a natural transformation
</Returns>
 <Description>
  Computes the horizontal composition of the functor <A>F</A> and
  the natural transformation <A>N</A>.
 </Description>
</ManSection>


</Section>


</Chapter>

