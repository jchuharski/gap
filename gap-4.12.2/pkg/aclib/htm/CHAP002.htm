<html><head><title>[aclib] 2 Algorithms for almost crystallographic groups</title></head>
<body text="#000000" bgcolor="#ffffff">
[<a href = "chapters.htm">Up</a>] [<a href ="CHAP001.htm">Previous</a>] [<a href ="CHAP003.htm">Next</a>] [<a href = "theindex.htm">Index</a>]
<h1>2 Algorithms for almost crystallographic groups</h1><p>
<P>
<H3>Sections</H3>
<oL>
<li> <A HREF="CHAP002.htm#SECT001">Properties of almost crystallographic groups</a>
<li> <A HREF="CHAP002.htm#SECT002">Betti numbers</a>
<li> <A HREF="CHAP002.htm#SECT003">Determination of certain extensions</a>
</ol><p>
<p>
This chapter presents a variety of algorithms for almost crystallographic
groups. In most cases, they assume a polycyclically presented group as 
input; in particular, the input groups must be polycyclic in this case.
The methods described here supplement the methods of the <font face="Gill Sans,Helvetica,Arial">Polycyclic</font> 
package for polycyclically presented groups. Many of the functions in this 
chapter are based on methods of the <font face="Gill Sans,Helvetica,Arial">Polycyclic</font> package and thus this 
package must be installed to use the functions introduced here. We refer to
the <font face="Gill Sans,Helvetica,Arial">Polycyclic</font> package for further information on polycyclic 
presentations.
<p>
<p>
<h2><a name="SECT001">2.1 Properties of almost crystallographic groups</a></h2>
<p><p>
<a name = "SSEC001.1"></a>
<li><code>IsAlmostCrystallographic( </code><var>G</var><code> ) P</code>
<p>
This function checks if a polycyclically presented group <var>G</var> is almost
crystallographic; that is, it checks if <var>G</var> is nilpotent-by-finite and
has no non-trivial finite normal subgroup.  
<p>
<a name = "SSEC001.2"></a>
<li><code>IsAlmostBieberbachGroup( </code><var>G</var><code> ) P</code>
<p>
This function checks if a polycyclically presented group <var>G</var> is almost
Bieberbach; that is, it checks if <var>G</var> is nilpotent-by-finite and torsion
free.
<p>
<p>
<h2><a name="SECT002">2.2 Betti numbers</a></h2>
<p><p>
Let <i>G</i> be a polycyclically presented and torsion free group of Hirsch 
length <i>n</i>. Then we can compute the Betti numbers &#946;<sub><i>i</i></sub>(<i>G</i>) for <i>i</i>  &#8712;  {0, 1, 2, <i>n</i>&#8722;2, <i>n</i>&#8722;1, <i>n</i>}. If <i>n</i>  &#8804; 6, then we can compute all Betti
numbers &#946;<sub><i>i</i></sub>(<i>G</i>) for 0  &#8804; <i>i</i>  &#8804; 6 of <i>G</i>. We introduce the following
functions for this purpose and we refer to <a href="biblio.htm#BRO"><cite>BRO</cite></a> for the details on 
the orientation module and the Betti numbers.
<p>
<a name = "SSEC002.1"></a>
<li><code>OrientationModule( </code><var>G</var><code> ) F</code>
<p>
This function determines the orientation module of the polycyclically
presented group <var>G</var>; that is, it returns a list of matrices <i>m</i><sub>1</sub>, &#8230;, <i>m</i><sub><i>n</i></sub>  &#8804; <i>GL</i>( 1, <b>Z</b>) which are the images of the 'Igs(G)' in their action
on the orientation module.  
<p>
<a name = "SSEC002.2"></a>
<li><code>BettiNumber( </code><var>G</var><code>, </code><var>m</var><code> ) F</code>
<p>
This function returns the <var>m</var>th Betti number of the polycyclically presented
torsion free group <var>G</var> if <i>m</i>  &#8712; {0, 1, 2, <i>n</i>&#8722;2, <i>n</i>&#8722;1, <i>n</i>}, where <i>n</i> is the 
Hirsch length of <var>G</var>. 
<p>
<a name = "SSEC002.3"></a>
<li><code>BettiNumbers( </code><var>G</var><code> ) A</code>
<p>
This function returns the Betti number of the polycyclically presented
torsion free group <var>G</var> if the Hirsch length of <var>G</var> is smaller than 7.
<p>
<p>
<h2><a name="SECT003">2.3 Determination of certain extensions</a></h2>
<p><p>
Let <i>G</i> be a polycyclically presented almost crystallographic group. We want 
to check the existence of certain extensions of <i>G</i>. 
<p>
First, it is well-known that the equivalence classes of extensions of <i>G</i>
correspond to the second cohomology group of <i>G</i>. This cohomology group can
be computed using the methods of the <font face="Gill Sans,Helvetica,Arial">Polycyclic</font> package for any 
explicitly given module of <i>G</i>. Further, we can construct a polycyclic
presentation for each cocycle of the second cohomology group. We give an 
example for such a computation below. 
<p>
However, we may be interested in certain extensions only; for example, 
the torsion free extensions are often of particular interest. If the 
second cohomology group is finite, then we can compute a polycyclic 
presentation for each element of this group and check the resulting group
for torsion freeness. But if the second cohomology group is infinite, then
this approach is not available. Hence we introduce the following special 
method to cover this and related applications.
<p>
<a name = "SSEC003.1"></a>
<li><code>HasExtensionOfType( </code><var>G</var><code>, </code><var>torsionfree</var><code>, </code><var>minimalcentre</var><code> ) F</code>
<p>
Suppose that <var>G</var> is a polycyclically presented almost crystallographic group
with Fitting subgroup <i>N</i>. This function checks if there is a <i>G</i>-module 
<i>M</i>  &#8773; <b>Z</b> which is centralized by <i>N</i> such that there exists a torsion
free extension of <i>M</i> by <var>G</var> (if the flag <var>torsionfree</var> is true) or an 
extension <i>E</i> with <i>Z</i>(<i>Fitt</i>(<i>E</i>)) = <i>M</i> (if the flag <var>minimalcentre</var> is true)
or an extension which satisfies both conditions (if both flags are true).
<p>
We note that the existence of such extensions is of interest in the 
determination of extensions which are almost Bieberbach groups. We refer 
to <a href="biblio.htm#DE1"><cite>DE1</cite></a> for a more detailed account of this application and for
further results of a similar nature.
<p>
<p>
[<a href = "chapters.htm">Up</a>] [<a href ="CHAP001.htm">Previous</a>] [<a href ="CHAP003.htm">Next</a>] [<a href = "theindex.htm">Index</a>]
<P>
<address>aclib manual<br>January 2020
</address></body></html>