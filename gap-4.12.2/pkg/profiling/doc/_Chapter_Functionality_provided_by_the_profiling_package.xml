<?xml version="1.0" encoding="UTF-8"?>

<!-- This is an automatically generated file. -->
<Chapter Label="Chapter_Functionality_provided_by_the_profiling_package">
<Heading>Functionality provided by the &profiling; package</Heading>

<Section Label="Chapter_Functionality_provided_by_the_profiling_package_Section_Reading_line-by-line_profiles">
<Heading>Reading line-by-line profiles</Heading>

<ManSection>
  <Func Arg="filename" Name="ReadLineByLineProfile" />
 <Description>
   Read <A>filename</A>, a line-by-line profile which was previously generated
   by &GAP;, using the <Ref Func="ProfileLineByLine" BookName="ref"/> 
   or <Ref Func="CoverageLineByLine" BookName="ref"/> functions from core &GAP;.
   A parsed profile can be transformed into a human-readable form using either
   <Ref Func="OutputAnnotatedCodeCoverageFiles"/> or
   <Ref Func="OutputFlameGraph"/>
 </Description>
</ManSection>


<ManSection>
  <Func Arg="filenames" Name="MergeLineByLineProfiles" />
 <Description>
   Read <A>filenames</A>, a list of line-by-line profiles which were previously
   generated by &GAP;, using the <Ref Func="ProfileLineByLine" BookName="ref"/> 
   or <Ref Func="CoverageLineByLine" BookName="ref"/> functions from core &GAP;.
   The elements of <A>filenames</A> can be either filenames,
   or files previously parsed by <Ref Func="ReadLineByLineProfile"/>.
 </Description>
</ManSection>


</Section>


<Section Label="Chapter_Functionality_provided_by_the_profiling_package_Section_Generating_flame_graphs">
<Heading>Generating flame graphs</Heading>

<P/>
 A 'flame graph' is a method of visualising where time is spent by a program.
<ManSection>
  <Func Arg="profile [, filename] [, options]" Name="OutputFlameGraph" />
 <Description>
   Generate an 'svg' file which represents a 'flame graph', a method of visualising
   where time is spent by a program.
   <P/>
   <A>profile</A> should be either a profile previously read by
   <Ref Func="ReadLineByLineProfile"/>,
   or a string giving the filename of a profile.
   <P/>
   The flame graph will be written to <A>filename</A> (or returned as a
   string if <A>filename</A> is not present).
   <P/>
   The final (optional) argument is a record of options. Currently, the allowed
   options are 'squash' (which is a boolean). If 'squash' is true then recursive
   functions calls will be squashed, so the graph will not show recursive functions
   calling themselves. The other allowed option is 'type', which can be "default"
   (a standard flamegraph), "reverse" (reverse the graph, showing the leaf functions
   first), and "chart" (where the graph shows the flow of time from left-to-right,
   rather than merging all calls from one function to another into one block).
 </Description>
</ManSection>


<ManSection>
  <Func Arg="profile [, filename]" Name="OutputFlameGraphInput" />
 <Description>
   Generate the input required to draw a 'flame graph', a method of visualising
   where time is spent by a program. One program for drawing flame graphs using
   this output can be found at <URL>https://github.com/brendangregg/FlameGraph</URL>.
   <P/>
   <A>profile</A> should be either a profile previously read by
   <Ref Func="ReadLineByLineProfile"/>,
   or a string giving the filename of a profile.
   <P/>
   The flame graph input will be written to <A>filename</A> (or returned as a
   string if <A>filename</A> is not present).
   <P/>
 </Description>
</ManSection>


</Section>


<Section Label="Chapter_Functionality_provided_by_the_profiling_package_Section_Generating_coverage_reports">
<Heading>Generating coverage reports</Heading>

<ManSection>
  <Func Arg="coverage, [indir,] outdir [, options]" Name="OutputAnnotatedCodeCoverageFiles" />
 <Description>
   Takes a previously generated profile and outputs HTML which shows the lines
   of code that were executed, and (if this was originally recorded) how long was spent
   executing these lines of code.
   <P/>
   <A>coverage</A> should be either a profile previously read by
   <Ref Func="ReadLineByLineProfile"/>,
   or a string giving the filename of a profile which will first
   be read with <F>ReadLineByLineProfile</F>.
   <P/>
   Files will be written to the directory <A>outdir</A>.
   <P/>
   The optional second argument gives a filter, only information about filenames
   starting with <A>indir</A> will be outputted.
   <P/>
   The final optional argument is a record of configuration options. The only
   currently allowed option is 'title', which will set the title of created pages.
 </Description>
</ManSection>


<ManSection>
  <Func Arg="coverage, outfile" Name="OutputJsonCoverage" />
 <Description>
   Takes a previously generated profile and outputs a json coverage file which is
   amongst other things accepted by <URL>codecov.io</URL>.
   <P/>
   <A>coverage</A> should be either a profile previously read by
   <Ref Func="ReadLineByLineProfile"/>,
   or a string giving the filename of a profile which will first
   be read with <F>ReadLineByLineProfile</F>.
   <P/>
   The output will be written to the file with name <A>outfile</A> (a string).
   <P/>
 </Description>
</ManSection>


<ManSection>
  <Func Arg="coverage, outfile" Name="OutputLcovCoverage" />
 <Description>
   Takes a previously generated profile and outputs an lcov coverage file.
   <P/>
   <A>coverage</A> should be either a profile previously read by
   <Ref Func="ReadLineByLineProfile"/>, or the filename of a profile which will first
   be read with <F>ReadLineByLineProfile</F>.
   <P/>
   The output will be written to the file with name <A>outfile</A> (a string).
   <P/>
 </Description>
</ManSection>


<ManSection>
  <Func Arg="coverage, outfile, pathtoremove[, opt]" Name="OutputCoverallsJsonCoverage" />
 <Description>
   Takes a previously generated profile and outputs a json coverage file which is
   accepted by <URL>coveralls.io</URL>.
   <P/>
   <A>coverage</A> should be either a profile previously read by
   <Ref Func="ReadLineByLineProfile"/>,
   or a string giving the filename of a profile which will first
   be read with <F>ReadLineByLineProfile</F>.
   <A>pathtoremove</A> is the path to the tested repository;
   this path prefix will be removed from all filenames in <A>coverage</A>.
   Finally, <A>opt</A> is a record. Its key/value pairs are directly inserted into
   the produced JSON, in the form of a JSON dictionary. This can be used to
   set the <C>service_name</C>, <C>service_job_id</C>, and more. If this record
   is not given, we try to guess the correct values based on the environment
   (currently only supported for Travis and AppVeyor).
   <P/>
   The output will be written to the file with name <A>outfile</A> (a string).
   <P/>
 </Description>
</ManSection>


</Section>


<Section Label="Chapter_Functionality_provided_by_the_profiling_package_Section_Miscellaneous">
<Heading>Miscellaneous</Heading>

<ManSection>
  <Func Arg="function, arguments" Name="LineByLineProfileFunction" />
 <Description>
   Calls <A>function</A> with the list of arguments <A>arguments</A>,
   and opens a time profile of the resulting call in the default web
   browser.
   <P/>
 </Description>
</ManSection>


<ManSection>
  <Func Arg="file[, opts]" Name="ProfileFile" />
 <Returns>   a string
</Returns>
 <Description>
   Tests the file with name <A>file</A> in another &GAP; session, and produces a
   code coverage report of lines that were executed in the process.  If
   <A>file</A> ends with <C>.tst</C> it will be called with <C>Test</C>;
   otherwise, it will be run directly.
<P/>
   The optional argument <A>opts</A> should be a record, and may contain any
   of the following components:
<List>
<Item>
<C>outdir</C>: a string denoting the directory into which the HTML
       files of the report will be placed (a temporary directory by default);
</Item>
<Item>
<C>indir</C>: a string such that only file paths beginning with
       <C>indir</C> will be profiled (default <C>""</C>);
</Item>
<Item>
<C>showOutput</C>: a boolean denoting whether to print test output to
       the screen (default <K>true</K>);
</Item>
<Item>
<C>open</C>: a boolean denoting whether to open the report in a web
       browser on completion (default <K>false</K>).
</Item>
</List>
<P/>
   This function returns the location of an HTML file containing the report.
 </Description>
</ManSection>


<ManSection>
  <Func Arg="pkg_name[, opts]" Name="ProfilePackage" />
 <Returns>   a string
</Returns>
 <Description>
   If <A>pkg_name</A> is the name of an installed package, then this function
   runs that package's test suite and produces a report on the code coverage
   of files inside the package.  The string returned denotes the location of
   an HTML file containing the report.  The optional argument <A>opts</A>
   behaves the same as in <Ref Func = "ProfileFile"/>.
 </Description>
</ManSection>


</Section>


</Chapter>

