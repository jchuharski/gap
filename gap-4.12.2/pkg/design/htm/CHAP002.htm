<html><head><title>[design] 2 Information from block design parameters</title></head>
<body text="#000000" bgcolor="#ffffff">
[<a href = "chapters.htm">Up</a>] [<a href ="CHAP001.htm">Previous</a>] [<a href ="CHAP003.htm">Next</a>] [<a href = "theindex.htm">Index</a>]
<h1>2 Information from block design parameters</h1><p>
<P>
<H3>Sections</H3>
<oL>
<li> <A HREF="CHAP002.htm#SECT001">Information from $t$-design parameters</a>
<li> <A HREF="CHAP002.htm#SECT002">Block intersection polynomials</a>
</ol><p>
<p>
<p>
<h2><a name="SECT001">2.1 Information from $t$-design parameters</a></h2>
<p><p>
For <i>t</i> a non-negative integer and <i>v</i>,<i>k</i>,&#955; positive integers
with <i>t</i> &#8804; <i>k</i> &#8804; <i>v</i>, a <i>t</i>-<strong>design</strong>
<a name = "I0"></a>

with <strong>parameters</strong>
<i>t</i>,<i>v</i>,<i>k</i>,&#955;, or a <i>t</i>-(<i>v</i>,<i>k</i>,&#955;) <strong>design</strong>, is a binary block
design with exactly <i>v</i> points, such that each block has size <i>k</i> and
each <i>t</i>-subset of the points is contained in exactly &#955; blocks.
<p>
<a name = "SSEC001.1"></a>
<li><code>TDesignLambdas( </code><var>t</var><code>, </code><var>v</var><code>, </code><var>k</var><code>, </code><var>lambda</var><code> )</code>
<p>
A <i>t</i>-(<i>v</i>,<i>k</i>,&#955;) design is also an <i>s</i>-(<i>v</i>,<i>k</i>,&#955;<sub><i>s</i></sub>) design
for 0 &#8804; <i>s</i> &#8804; <i>t</i>, where <br clear="all" /><table border="0" width="100%"><tr><td><table align="center" cellspacing="0"  cellpadding="2"><tr><td nowrap="nowrap" align="center">&#955;<sub><i>s</i></sub>=&#955;</td><td align="left" class="cl">&#x239B;<br />&#x239D;</td><td nowrap="nowrap" align="center"><i>v</i>&#8722;<i>s</i><br /><i>t</i>&#8722;<i>s</i><br /></td><td align="left" class="cl">&#x239E;<br />&#x23A0;</td><td nowrap="nowrap" align="center">/</td><td align="left" class="cl">&#x239B;<br />&#x239D;</td><td nowrap="nowrap" align="center"><i>k</i>&#8722;<i>s</i><br /><i>t</i>&#8722;<i>s</i><br /></td><td align="left" class="cl">&#x239E;<br />&#x23A0;</td><td nowrap="nowrap" align="center"></td></tr></table></td></tr></table>.
<p>
Given a non-negative integer <var>t</var>, and positive integers <var>v</var>, <var>k</var>,
<var>lambda</var>, with <i>t</i>  &#8804; <i>k</i>  &#8804; <i>v</i> , this function returns a length
<i>t</i> +1 list whose (<i>s</i>+1)-st element is &#955;<sub><i>s</i></sub> as defined above,
if all the &#955;<sub><i>s</i></sub> are integers. Otherwise, <code>fail</code> is returned.
<p>
<pre>
gap&gt; TDesignLambdas(5,24,8,1);
[ 759, 253, 77, 21, 5, 1 ]
</pre>
<p>
<a name = "SSEC001.2"></a>
<li><code>TDesignLambdaMin( </code><var>t</var><code>, </code><var>v</var><code>, </code><var>k</var><code> )</code>
<p>
Given a non-negative integer <var>t</var>, and positive integers <var>v</var> and <var>k</var>, with
<i>t</i>  &#8804; <i>k</i>  &#8804; <i>v</i> , this function returns the minimum positive <var>lambda</var>
such that <code>TDesignLambdas( </code><var>t</var><code>, </code><var>v</var><code>, </code><var>k</var><code>, </code><var>lambda</var><code> )</code> does not return
<code>fail</code>.
<p>
See <a href="CHAP002.htm#SSEC001.1">TDesignLambdas</a>. 
<p>
<pre>
gap&gt; TDesignLambdaMin(5,24,8);  
1
gap&gt; TDesignLambdaMin(2,12,4);
3
</pre>
<p>
<a name = "SSEC001.3"></a>
<li><code>TDesignIntersectionTriangle( </code><var>t</var><code>, </code><var>v</var><code>, </code><var>k</var><code>, </code><var>lambda</var><code> )</code>
<p>
Suppose <i>D</i> is a <var>t</var>-(<var>v</var>,<var>k</var>,<var>lambda</var>) design, let <i>i</i> and <i>j</i>
be non-negative integers with <i>i</i>+<i>j</i> &#8804; <i>t</i>, and suppose <i>X</i> and <i>Y</i>
are disjoint subsets of the points of <i>D</i>, such that <i>X</i> and <i>Y</i> have
respective sizes <i>i</i> and <i>j</i>. The (<i>i</i>,<i>j</i>)-<strong>intersection number</strong> is
the number of blocks of <i>D</i> that contain <i>X</i> and are disjoint from <i>Y</i>
(this number depends only on <var>t</var>, <var>v</var>, <var>k</var>, <var>lambda</var>, <i>i</i> and <i>j</i>).
<p>
Given a non-negative integer <var>t</var>, and positive integers <var>v</var>, <var>k</var>
and <var>lambda</var>, with <i>t</i>  &#8804; <i>k</i>  &#8804; <i>v</i> , this function returns the
<strong><var>t</var>-design intersection triangle</strong>, which is a two dimensional array
whose (<i>i</i>+1,<i>j</i>+1)-entry is the (<i>i</i>,<i>j</i>)-intersection number for
a <var>t</var>-(<var>v</var>,<var>k</var>,<var>lambda</var>) design (assuming such a design exists),
such that <i>i</i>,<i>j</i> &#8805; 0, <i>i</i>+<i>j</i> &#8804; <i>t</i>. This function returns <code>fail</code> if
<code>TDesignLambdas(</code><var>t</var><code>,</code><var>v</var><code>,</code><var>k</var><code>,</code><var>lambda</var><code>)</code> does. When <i>lambda</i> =1, then more
information can be obtained using <a href="CHAP002.htm#SSEC001.4">SteinerSystemIntersectionTriangle</a>.
<p>
<pre>
gap&gt; TDesignLambdas(2,12,4,3);             
[ 33, 11, 3 ]
gap&gt; TDesignIntersectionTriangle(2,12,4,3);
[ [ 33, 22, 14 ], [ 11, 8 ], [ 3 ] ]
gap&gt; TDesignLambdas(2,12,4,2);             
fail
gap&gt; TDesignIntersectionTriangle(2,12,4,2);
fail
</pre>
<p>
<a name = "SSEC001.4"></a>
<li><code>SteinerSystemIntersectionTriangle( </code><var>t</var><code>, </code><var>v</var><code>, </code><var>k</var><code> )</code>
<p>
A <strong>Steiner system</strong> is a <var>t</var>-(<var>v</var>,<var>k</var>,1) design, and in this case it
is possible to extend the notion of intersection triangle defined in
<a href="CHAP002.htm#SSEC001.3">TDesignIntersectionTriangle</a>.
<p>
Suppose <i>D</i> is a <var>t</var>-(<var>v</var>,<var>k</var>,1) design, with <i>B</i> a block of <i>D</i>,
let <i>i</i> and <i>j</i> be non-negative integers with <i>i</i>+<i>j</i> &#8804; <i>k</i>, and suppose
<i>X</i> and <i>Y</i> are disjoint subsets of <i>B</i>, such that <i>X</i> and <i>Y</i> have
respective sizes <i>i</i> and <i>j</i>. The (<i>i</i>,<i>j</i>)-<strong>intersection number</strong> is the
number of blocks of <i>D</i> that contain <i>X</i> and are disjoint from <i>Y</i>
(this number depends only on <var>t</var>, <var>v</var>, <var>k</var>, <i>i</i> and <i>j</i>). Note that
when <i>i</i>+<i>j</i> &#8804; <i>t</i>, this intersection number is the same as that defined in
<a href="CHAP002.htm#SSEC001.3">TDesignIntersectionTriangle</a> for the general <var>t</var>-design case.
<p>
Given a non-negative integer <var>t</var>, and positive integers <var>v</var> and
<var>k</var>, with <i>t</i>  &#8804; <i>k</i>  &#8804; <i>v</i> , this function returns the <strong>Steiner
system intersection triangle</strong>, which is a two dimensional array whose
(<i>i</i>+1,<i>j</i>+1)-entry is the (<i>i</i>,<i>j</i>)-intersection number for a <var>t</var>-(<var>v</var>,<var>k</var>,1)
design (assuming such a design exists), such that <i>i</i>,<i>j</i> &#8805; 0, <i>i</i>+<i>j</i> &#8804; <i>k</i>. This function returns <code>fail</code> if <code>TDesignLambdas(</code><var>t</var><code>,</code><var>v</var><code>,</code><var>k</var><code>,1)</code> does.
<p>
See also <a href="CHAP002.htm#SSEC001.3">TDesignIntersectionTriangle</a>.
<p>
<pre>
gap&gt; SteinerSystemIntersectionTriangle(5,24,8);
[ [ 759, 506, 330, 210, 130, 78, 46, 30, 30 ], 
  [ 253, 176, 120, 80, 52, 32, 16, 0 ], [ 77, 56, 40, 28, 20, 16, 16 ], 
  [ 21, 16, 12, 8, 4, 0 ], [ 5, 4, 4, 4, 4 ], [ 1, 0, 0, 0 ], [ 1, 0, 0 ], 
  [ 1, 0 ], [ 1 ] ]
gap&gt; TDesignIntersectionTriangle(5,24,8,1);    
[ [ 759, 506, 330, 210, 130, 78 ], [ 253, 176, 120, 80, 52 ], 
  [ 77, 56, 40, 28 ], [ 21, 16, 12 ], [ 5, 4 ], [ 1 ] ]
</pre>
<p>
<a name = "SSEC001.5"></a>
<li><code>TDesignBlockMultiplicityBound( </code><var>t</var><code>, </code><var>v</var><code>, </code><var>k</var><code>, </code><var>lambda</var><code> )</code>
<p>
Given a non-negative integer <var>t</var>, and positive integers <var>v</var>, <var>k</var> and
<var>lambda</var>, with <i>t</i>  &#8804; <i>k</i>  &#8804; <i>v</i> , this function returns a non-negative
integer which is an upper bound on the multiplicity of any block in
any <var>t</var>-(<var>v</var>,<var>k</var>,<var>lambda</var>) design (the <strong>multiplicity</strong> of a block in
a block design is the number of times that block occurs in the block
list). In particular, if the value 0 is returned, then this implies
that a <var>t</var>-(<var>v</var>,<var>k</var>,<var>lambda</var>) design does not exist.
<p>
Although our bounds are reasonably good, we do not claim that the
returned bound <i>m</i> is always achieved; that is, there may not exist a
<var>t</var>-(<var>v</var>,<var>k</var>,<var>lambda</var>) design having a block with multiplicity <i>m</i>.
<p>
See also <a href="CHAP002.htm#SSEC001.6">ResolvableTDesignBlockMultiplicityBound</a>.
<p>
<pre>
gap&gt; TDesignBlockMultiplicityBound(5,16,7,5);
2
gap&gt; TDesignBlockMultiplicityBound(2,36,6,1);
0
gap&gt; TDesignBlockMultiplicityBound(2,36,6,2);
2
gap&gt; TDesignBlockMultiplicityBound(2,15,5,2);
0
gap&gt; TDesignBlockMultiplicityBound(2,15,5,4);
2
gap&gt; TDesignBlockMultiplicityBound(2,11,4,6);
3
</pre>
<p>
<a name = "SSEC001.6"></a>
<li><code>ResolvableTDesignBlockMultiplicityBound( </code><var>t</var><code>, </code><var>v</var><code>, </code><var>k</var><code>, </code><var>lambda</var><code> )</code>
<p>
A <strong>resolution</strong> of a block design is a partition of the blocks into
subsets, each of which forms a partition of the point set, and a block
design is <strong>resolvable</strong> if it has a resolution.
<p>
Given a non-negative integer <var>t</var>, and positive integers <var>v</var>, <var>k</var> and
<var>lambda</var>, with <i>t</i>  &#8804; <i>k</i>  &#8804; <i>v</i> , this function returns a non-negative
integer which is an upper bound on the multiplicity of any block in any
resolvable <var>t</var>-(<var>v</var>,<var>k</var>,<var>lambda</var>) design (the <strong>multiplicity</strong> of a block
in a block design is the number of times that block occurs in the block
list). In particular, if the value 0 is returned, then this implies
that a resolvable <var>t</var>-(<var>v</var>,<var>k</var>,<var>lambda</var>) design does not exist.
<p>
Although our bounds are reasonably good, we do not claim that the returned
bound <i>m</i> is always achieved; that is, there may not exist a resolvable
<var>t</var>-(<var>v</var>,<var>k</var>,<var>lambda</var>) design having a block with multiplicity <i>m</i>.
<p>
See also <a href="CHAP002.htm#SSEC001.5">TDesignBlockMultiplicityBound</a>.
<p>
<pre>
gap&gt; ResolvableTDesignBlockMultiplicityBound(5,12,6,1);
1
gap&gt; ResolvableTDesignBlockMultiplicityBound(2,21,7,3);
0
gap&gt; TDesignBlockMultiplicityBound(2,21,7,3);          
1
gap&gt; ResolvableTDesignBlockMultiplicityBound(2,12,4,3);
1
gap&gt; TDesignBlockMultiplicityBound(2,12,4,3);          
2
</pre>
<p>
<p>
<h2><a name="SECT002">2.2 Block intersection polynomials</a></h2>
<p><p>
In <a href="biblio.htm#CaSo"><cite>CaSo</cite></a>, Cameron and Soicher introduce block intersection
polynomials and their applications to the study of block designs.
Here we give functions to construct and analyze block intersection 
polynomials. 
<p>
<a name = "SSEC002.1"></a>
<li><code>BlockIntersectionPolynomial(</code><var>x</var><code>, </code><var>m</var><code>, </code><var>lambdavec</var><code> )</code>
<p>
For <i>k</i> a non-negative integer, define the polynomial
<i>P</i>(<i>x</i>,<i>k</i>)=<i>x</i>(<i>x</i>&#8722;1)&#8230;(<i>x</i>&#8722;<i>k</i>+1). Let <i>s</i> and <i>t</i> be non-negative
integers, with <i>s</i> &#8805; <i>t</i>, and let <i>m</i><sub>0</sub>,&#8230;,<i>m</i><sub><i>s</i></sub> and
&#955;<sub>0</sub>,&#8230;,&#955;<sub><i>t</i></sub> be rational numbers. Then the <strong>block
intersection polynomial</strong> for the sequences [<i>m</i><sub>0</sub>,&#8230;,<i>m</i><sub><i>s</i></sub>],
[&#955;<sub>0</sub>,&#8230;,&#955;<sub><i>t</i></sub>] is defined to be 
<br clear="all" /><table border="0" width="100%"><tr><td><table align="center" cellspacing="0"  cellpadding="2"><tr><td nowrap="nowrap" align="center"></td><td nowrap="nowrap" align="center"><small><i>t</i></small><!--sup--><br /><span class="largerstill">&#8721;<br /></span><small><i>j</i>=0</small>&nbsp;<br /></td><td nowrap="nowrap" align="center"></td><td align="left" class="cl">&#x239B;<br />&#x239D;</td><td nowrap="nowrap" align="center"><i>t</i><br /><i>j</i><br /></td><td align="left" class="cl">&#x239E;<br />&#x23A0;</td><td nowrap="nowrap" align="center"><i>P</i>(&#8722;<i>x</i>,<i>t</i>&#8722;<i>j</i>)[<i>P</i>(<i>s</i>,<i>j</i>)&#955;<sub><i>j</i></sub>&#8722;</td><td nowrap="nowrap" align="center"><small><i>s</i></small><!--sup--><br /><span class="largerstill">&#8721;<br /></span><small><i>i</i>=<i>j</i></small>&nbsp;<br /></td><td nowrap="nowrap" align="center"><i>P</i>(<i>i</i>,<i>j</i>)<i>m</i><sub><i>i</i></sub>],</td></tr></table></td></tr></table> 
and is denoted by <i>B</i>(<i>x</i>,[<i>m</i><sub>0</sub>,&#8230;,<i>m</i><sub><i>s</i></sub>],[&#955;<sub>0</sub>,&#8230;,&#955;<sub><i>t</i></sub>])&#183;
<p>
Now suppose <var>x</var> is an indeterminate over the rationals, and <var>m</var> and
<var>lambdavec</var> are non-empty lists of rational numbers, such that the length
of <var>lambdavec</var> is not greater than that of <var>m</var>.  Then this function
returns the block intersection polynomial <i>B</i>(<i>x</i> ,<i>m</i> ,<i>lambdavec</i> ).
<p>
The importance of a block intersection polynomial is as follows.
Let <i>D</i>=(<i>V</i>,<span style="font-family:helvetica"><i>B</i></span>) be a block design, let <i>S</i> &#8838; <i>V</i>, with <i>s</i>=&#124;<i>S</i>&#124;,
and for <i>i</i>=0,&#8230;,<i>s</i>, suppose that <i>m</i><sub><i>i</i></sub> is a non-negative integer
with <i>m</i><sub><i>i</i></sub> &#8804; <i>n</i><sub><i>i</i></sub>, where <i>n</i><sub><i>i</i></sub> is the number of blocks intersecting <i>S</i>
in exactly <i>i</i> points. Let <i>t</i> be a non-negative <strong>even</strong> integer with <i>t</i> &#8804; <i>s</i>, and suppose that, for <i>j</i>=0&#8230;,<i>t</i>, we have <br clear="all" /><table border="0" width="100%"><tr><td><table align="center" cellspacing="0"  cellpadding="2"><tr><td nowrap="nowrap" align="center">&#955;<sub><i>j</i></sub>=1/</td><td align="left" class="cl">&#x239B;<br />&#x239D;</td><td nowrap="nowrap" align="center"><i>s</i><br /><i>j</i><br /></td><td align="left" class="cl">&#x239E;<br />&#x23A0;</td><td nowrap="nowrap" align="center"></td><td nowrap="nowrap" align="center"><small></small><!--sup--><br /><span class="largerstill">&#8721;<br /></span><small><i>T</i> &#8838; <i>S</i>,&#124;<i>T</i>&#124;=<i>j</i></small>&nbsp;<br /></td><td nowrap="nowrap" align="center">&#955;<sub><i>T</i></sub></td></tr></table></td></tr></table>, where &#955;<sub><i>T</i></sub> is the
number of blocks of <i>D</i> containing <i>T</i>.  Then the block intersection
polynomial <i>B</i>(<i>x</i>)=<i>B</i>(<i>x</i>,[<i>m</i><sub>0</sub>,&#8230;,<i>m</i><sub><i>s</i></sub>],[&#955;<sub>0</sub>,&#8230;,&#955;<sub><i>t</i></sub>])
is a polynomial with integer coefficients, and <i>B</i>(<i>n</i>) &#8805; 0 for every
integer <i>n</i>. (These conditions can be checked using the function
<a href="CHAP002.htm#SSEC002.2">BlockIntersectionPolynomialCheck</a>.) In addition, if <i>B</i>(<i>n</i>)=0 for some
integer <i>n</i>, then <i>m</i><sub><i>i</i></sub>=<i>n</i><sub><i>i</i></sub> for <i>i</i> &#8713; {<i>n</i>,<i>n</i>+1,&#8230;,<i>n</i>+<i>t</i>&#8722;1}.
<p>
For more information on block intersection polynomials and their
applications, see <a href="biblio.htm#CaSo"><cite>CaSo</cite></a> and <a href="biblio.htm#Soi1"><cite>Soi1</cite></a>.
<p>
<pre>
gap&gt; x:=Indeterminate(Rationals,1);
x_1
gap&gt; m:=[0,0,0,0,0,0,0,1];;
gap&gt; lambdavec:=TDesignLambdas(6,14,7,4);
[ 1716, 858, 396, 165, 60, 18, 4 ]
gap&gt; B:=BlockIntersectionPolynomial(x,m,lambdavec);
1715*x_1^6-10269*x_1^5+34685*x_1^4-69615*x_1^3+84560*x_1^2-56196*x_1+15120
gap&gt; Factors(B);
[ 1715*x_1-1715,
  x_1^5-1222/245*x_1^4+3733/245*x_1^3-6212/245*x_1^2+5868/245*x_1-432/49 ]
gap&gt; Value(B,1);
0
</pre>
<p>
<a name = "SSEC002.2"></a>
<li><code>BlockIntersectionPolynomialCheck(</code><var>m</var><code>, </code><var>lambdavec</var><code>)</code>
<p>
Suppose <var>m</var> is a list of non-negative integers, and <var>lambdavec</var> is a
list of non-negative rational numbers, with the length of <var>lambdavec</var>
odd and not greater than the length of <var>m</var>.
<p>
Then, for <var>x</var> an indeterminate over the rationals, this function
checks whether <code>BlockIntersectionPolynomial(</code><var>x</var><code>,</code><var>m</var><code>,</code><var>lambdavec</var><code>)</code> is a
polynomial over the integers and has a non-negative value at each integer.
The function returns <code>true</code> if this is so; else <code>false</code> is returned.
<p>
See also <a href="CHAP002.htm#SSEC002.1">BlockIntersectionPolynomial</a>.
<p>
<pre>
gap&gt; m:=[0,0,0,0,0,0,0,1];;
gap&gt; lambdavec:=TDesignLambdas(6,14,7,4);
[ 1716, 858, 396, 165, 60, 18, 4 ]
gap&gt; BlockIntersectionPolynomialCheck(m,lambdavec);
true
gap&gt; m:=[1,0,0,0,0,0,0,1];;
gap&gt; BlockIntersectionPolynomialCheck(m,lambdavec);
false
</pre>
<p>
[<a href = "chapters.htm">Up</a>] [<a href ="CHAP001.htm">Previous</a>] [<a href ="CHAP003.htm">Next</a>] [<a href = "theindex.htm">Index</a>]
<P>
<address>design manual<br>March 2019
</address></body></html>