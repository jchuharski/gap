<?xml version="1.0" encoding="UTF-8"?>

<!-- This is an automatically generated file. -->
<Chapter Label="Chapter_funcs">
<Heading>Functions for calculating with Majorana representations</Heading>

<Section Label="Chapter_Functions_for_calculating_with_Majorana_representations_Section_Calculating_products">
<Heading>Calculating products</Heading>

<ManSection>
  <Func Arg="u, v, algebraproducts, setup" Name="MAJORANA_AlgebraProduct" />
 <Returns>the algebra product of vectors <A>u</A> and <A>v</A>
</Returns>
 <Description>
The arguments <A>u</A> and <A>v</A> must be row vectors in sparse
 matrix format. The arguments <A>algebraproducts</A> and <A>setup</A> must be
 the components with these names of a representation as outputted by
 <Ref Func="MajoranaRepresentation"/>. The output is the algebra product of
 <A>u</A> and <A>v</A>, also in sparse matrix format.
 </Description>
</ManSection>


<ManSection>
  <Func Arg="u, v, innerproducts, setup" Name="MAJORANA_InnerProduct" />
 <Returns>the inner product of vectors <A>u</A> and <A>v</A>
</Returns>
 <Description>
The arguments <A>u</A> and <A>v</A> must be row vectors in sparse
 matrix format. The arguments <A>innerproducts</A> and <A>setup</A> must be
 the components with these names of a representation as outputted by
 <Ref Func="MajoranaRepresentation"/>. The output is the inner product of
 <A>u</A> and <A>v</A>.
 </Description>
</ManSection>


<Example><![CDATA[
gap> G := AlternatingGroup(5);;
gap> T := AsList(ConjugacyClass(G, (1,2)(3,4)));;
gap> input := ShapesOfMajoranaRepresentation(G,T);;
gap> rep := MajoranaRepresentation(input, 1);;
gap> Size(rep.setup.coords);
21
gap> u := SparseMatrix( 1, 21, [ [ 1 ] ], [ [ 1 ] ], Rationals);;
gap> v := SparseMatrix( 1, 21, [ [ 17 ] ], [ [ 1 ] ], Rationals);;
gap> MAJORANA_AlgebraProduct(u, v, rep.algebraproducts, rep.setup);
<a 1 x 21 sparse matrix over Rationals>
gap> MAJORANA_InnerProduct(u, v, rep.innerproducts, rep.setup);
-1/8192
]]></Example>


</Section>


<Section Label="Chapter_Functions_for_calculating_with_Majorana_representations_Section_Basic_functions">
<Heading>Basic functions</Heading>

<ManSection>
  <Func Arg="rep" Name="MAJORANA_IsComplete" />
 <Returns>true is all algebra products have been found, otherwise returns false
</Returns>
 <Description>
Takes a Majorana representation <A>rep</A>, as outputted by
 <Ref Func="MajoranaRepresentation"/>. If the representation is complete, that is
 to say, if the vector space spanned by the basis vectors indexed by the elements
 in <A>rep.setup.coords</A> is closed under the algebra product given by
 <A>rep.algebraproducts</A>, return true. Otherwise, if some products are not known
 then return false.
 </Description>
</ManSection>


<ManSection>
  <Func Arg="rep" Name="MAJORANA_Dimension" />
 <Returns>the dimension of the representation <A>rep</A> as an integer
</Returns>
 <Description>
Takes a Majorana representation <A>rep</A>, as outputted by
 <Ref Func="MajoranaRepresentation"/> and returns its dimension as a
 vector space. If the representation is not complete
 (cf. <Ref Func="MAJORANA_IsComplete"/> ) then this value might not be
 the true dimension of the algebra.
 </Description>
</ManSection>


<ManSection>
  <Func Arg="index, eval, rep" Name="MAJORANA_Eigenvectors" />
 <Returns>a basis of the eigenspace of the axis as position <A>index</A> with  eigenvalue <A>eval</A> as a sparse matrix
</Returns>
 <Description>
<P/>
 </Description>
</ManSection>


<ManSection>
  <Func Arg="rep" Name="MAJORANA_Basis" />
 <Returns>a sparse matrix that gives a basis of the algebra
</Returns>
 <Description>
<P/>
 </Description>
</ManSection>


<ManSection>
  <Func Arg="axis, basis, rep" Name="MAJORANA_AdjointAction" />
 <Returns>a sparse matrix representing the adjoint action of <A>axis</A> on  <A>basis</A>
</Returns>
 <Description>
Takes a Majorana representation <A>rep</A>, as outputted by
 <Ref Func="MajoranaRepresentation"/>, a row vector <A>axis</A> in sparse
 matrix format and a set of basis vectors, also in sparse matrix format.
 Returns a matrix, also in sparse matrix format, that represents the
 adjoint action of <A>axis</A> on <A>basis</A>.
 </Description>
</ManSection>


</Section>


<Section Label="Chapter_Functions_for_calculating_with_Majorana_representations_Section_The_subalgebra_structure">
<Heading>The subalgebra structure</Heading>

<P/>
<ManSection>
  <Func Arg="vecs, rep" Name="MAJORANA_Subalgebra" />
 <Returns>the subalgebra of the representation <A>rep</A> that is generated by  <A>vecs</A>
</Returns>
 <Description>
Takes a Majorana representation <A>rep</A>, as outputted by
 <Ref Func="MajoranaRepresentation"/> and a set of vectors <A>vecs</A> in sparse
 matrix format and returns the subalgebra generated by <A>vecs</A>, also
 in sparse matrix format.
 </Description>
</ManSection>


<ManSection>
  <Func Arg="subalg, rep" Name="MAJORANA_IsJordanAlgebra" />
 <Returns>true if the subalgebra <A>subalg</A> is a Jordan algebra, otherwise  returns false
</Returns>
 <Description>
Takes a Majorana representation <A>rep</A>, as outputted by
 <Ref Func="MajoranaRepresentation"/> and a subalgebra <A>subalg</A> of rep.
 If this subalgebra is a Jordan algebra then function returns true, otherwise
 returns false.
 </Description>
</ManSection>


<Example><![CDATA[
gap> G := G := AlternatingGroup(5);;
gap> T := AsList( ConjugacyClass(G, (1,2)(3,4)));;
gap> input := ShapesOfMajoranaRepresentation(G,T);;
gap> rep := MajoranaRepresentation(input, 2);;
gap> MAJORANA_IsComplete(rep);
false
gap> NClosedMajoranaRepresentation(rep);;
gap> MAJORANA_IsComplete(rep);
true
gap> MAJORANA_Dimension(rep);
46
gap> basis := MAJORANA_Basis(rep);
<a 46 x 61 sparse matrix over Rationals>
gap> subalg := MAJORANA_Subalgebra(basis, rep);
<a 46 x 61 sparse matrix over Rationals>
gap> MAJORANA_IsJordanAlgebra(subalg, rep);
false
]]></Example>


</Section>


</Chapter>

