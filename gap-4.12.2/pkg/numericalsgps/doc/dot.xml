<?xml version="1.0" encoding="UTF-8"?>

<Section>
    <Heading>
      Dot functions
    </Heading>

    We provide several functions to translate graphs, Hasse diagrams or trees related to numerical and affine semigroups to the dot language. This can either be used with graphviz or any javascript library that interprets dot language. We give the alternative to use <C>DotSplash</C> that uses viz.js. 

<ManSection>
  <Func Name="DotBinaryRelation" Arg="br"/>
  <Description>
    <C>br</C> is a binary relation.  Returns a GraphViz dot that represents the binary relation <C>br</C>. The set of vertices of the resulting graph is the source of <C>br</C>. Edges join those elements which are related with respect to <C>br</C>.
<Example><![CDATA[
gap> br:=BinaryRelationByElements(Domain([1,2]), [DirectProductElement([1,2])]);
<general mapping: <object> -> <object> >
gap> Print(DotBinaryRelation(br));
digraph  NSGraph{rankdir = TB; edge[dir=back];
1 [label="1"];
2 [label="2"];
2 -> 1;
}
]]></Example>
  </Description>
</ManSection>

<ManSection>
  <Func Name="HasseDiagramOfNumericalSemigroup" Arg="S, A"/>
  <Description>
    <C>S</C> is a numerical semigroup and <C>A</C> is a set of integers. Returns a binary relation which is the Hasse diagram of <C>A</C> with  respect to the ordering <M>a\preceq b</M> if <M>b - a</M> in <C>S</C>.
<Example><![CDATA[
gap> s:=NumericalSemigroup(3,5,7);;
gap> HasseDiagramOfNumericalSemigroup(s,[1,2,3]);
<general mapping: <object> -> <object> >
]]></Example>
  </Description>
</ManSection>


<ManSection>
  <Func Name="HasseDiagramOfBettiElementsOfNumericalSemigroup" Arg="S"/>
  <Description>
    <C>S</C> is a numerical semigroup. Applies <Ref Func="HasseDiagramOfBettiElementsOfNumericalSemigroup"/> with arguments <C>S</C> and its Betti elements.
<Example><![CDATA[
gap> s:=NumericalSemigroup(3,5,7);;
gap> HasseDiagramOfBettiElementsOfNumericalSemigroup(s);
<general mapping: <object> -> <object> >
]]></Example>
  </Description>
</ManSection>

<ManSection>
  <Func Name="HasseDiagramOfAperyListOfNumericalSemigroup" Arg="S, [n]"/>
  <Description>
    <C>S</C> is a numerical semigroup, <C>n</C> is an integer (optional, if not provided, the multiplicity of the semigroup is taken as its value). Applies <Ref Func="HasseDiagramOfBettiElementsOfNumericalSemigroup"/> with arguments <C>S</C> and the Apéry set of <C>S</C> with respect to <C>n</C>.
<Example><![CDATA[
gap> s:=NumericalSemigroup(3,5,7);;
gap> HasseDiagramOfAperyListOfNumericalSemigroup(s);
<general mapping: <object> -> <object> >
gap> HasseDiagramOfAperyListOfNumericalSemigroup(s,10);
<general mapping: <object> -> <object> >
]]></Example>
  </Description>
</ManSection>

<ManSection>
  <Func Name="DotTreeOfGluingsOfNumericalSemigroup" Arg="S"/>
  <Description>
    <C>S</C> is a numerical semigroup. It outputs a tree (in dot) representing the many ways <C>S</C> can be decomposed as a gluing of numerical semigroups (and goes recursively in the factors). 
<Example><![CDATA[
gap> s:=NumericalSemigroup(4,6,9);;
gap> Print(DotOverSemigroupsNumericalSemigroup(s));
digraph  NSGraph{rankdir = TB; 
0 [label="< 4, 6, 9 >"]; 
0 [label="< 4, 6, 9 >", style=filled]; 
1 [label="< 4 > + < 6, 9 >" , shape=box]; 
2 [label="< 1 >", style=filled]; 
3 [label="< 2, 3 >", style=filled]; 
4 [label="< 2 > + < 3 >" , shape=box]; 
5 [label="< 1 >", style=filled]; 
6 [label="< 1 >", style=filled]; 
7 [label="< 4, 6 > + < 9 >" , shape=box]; 
8 [label="< 2, 3 >", style=filled]; 
10 [label="< 2 > + < 3 >" , shape=box]; 
11 [label="< 1 >", style=filled]; 
12 [label="< 1 >", style=filled]; 
9 [label="< 1 >", style=filled]; 
0 -> 1; 
1 -> 2; 
1 -> 3; 
3 -> 4; 
4 -> 5; 
4 -> 6; 
0 -> 7; 
7 -> 8; 
7 -> 9; 
8 -> 10; 
10 -> 11; 
10 -> 12; 
}
]]></Example>

      <Alt Only="LaTeX">
        \begin{center}
        \includegraphics[height=5cm]{img/tree-dot.pdf}
        \end{center}
      </Alt>
      <Alt Only="HTML">
        &#60;br&#62;&#60;center&#62;&#60;img src=&#34;img/tree-dot.jpg&#34;&#62;&#60;/center&#62;&#60;br&#62;
      </Alt>


  </Description>
</ManSection>


<ManSection>
  <Func Name="DotOverSemigroupsNumericalSemigroup" Arg="S"/>
  <Description>
    <C>S</C> is a numerical semigroup. It outputs the Hasse diagram (in dot) of oversemigroups of <C>S</C>. 
<Example><![CDATA[
gap> s:=NumericalSemigroup(4,6,9);;
gap> Print(DotOverSemigroupsNumericalSemigroup(s));
digraph  NSGraph{rankdir = TB; edge[dir=back];
1 [label="< 1 >", style=filled];
2 [label="< 2, 3 >", style=filled];
3 [label="< 2, 5 >", style=filled];
4 [label="< 2, 7 >", style=filled];
5 [label="< 2, 9 >", style=filled];
6 [label="< 3, 4, 5 >", style=filled];
7 [label="< 3, 4 >", style=filled];
8 [label="< 4, 5, 6, 7 >"];
9 [label="< 4, 5, 6 >", style=filled];
10 [label="< 4, 6, 7, 9 >"];
11 [label="< 4, 6, 9, 11 >"];
12 [label="< 4, 6, 9 >", style=filled];
1 -> 2;
2 -> 3;
2 -> 6;
3 -> 4;
3 -> 8;
4 -> 5;
4 -> 10;
5 -> 11;
6 -> 7;
6 -> 8;
7 -> 10;
8 -> 9;
8 -> 10;
9 -> 11;
10 -> 11;
11 -> 12;
}
]]></Example>
  </Description>
</ManSection>


<ManSection>
  <Oper Name="DotRosalesGraph" Arg="n, S" Label="for affine semigroup"/>
  <Oper Name="DotRosalesGraph" Arg="n, S" Label="for numerical semigroup"/>
  <Description>
    <C>S</C> is either numerical or an affine semigroup and <C>n</C> is an element in <C>S</C>. It outputs the graph associated to <C>n</C> in <C>S</C> (see <Ref Func="GraphAssociatedToElementInNumericalSemigroup"/>). 
<Example><![CDATA[
gap> s:=NumericalSemigroup(4,6,9);;
gap> Print(DotRosalesGraph(15,s));
graph  NSGraph{
1 [label="6"];
2 [label="9"];
2 -- 1;
}
]]></Example>
  </Description>
</ManSection>


<ManSection>
  <Oper Name="DotFactorizationGraph" Arg="f"/>
  <Description>
    <C>f</C> is a set of factorizations. 
    Returns the graph (in dot) of factorizations associated to <C>f</C>: a complete graph whose vertices are the elements of <C>f</C>. Edges are labelled with distances between the nodes they join. Kruskal algorithm is used to draw in red a spanning tree with minimal distances. Thus the catenary degree is reached in the edges of the tree.

<Example><![CDATA[
gap> f:=FactorizationsIntegerWRTList(20,[3,5,7]);
[ [ 5, 1, 0 ], [ 0, 4, 0 ], [ 1, 2, 1 ], [ 2, 0, 2 ] ]
gap> Print(DotFactorizationGraph(f));
graph  NSGraph{
1 [label=" (5, 1, 0)"];
2 [label=" (0, 4, 0)"];
3 [label=" (1, 2, 1)"];
4 [label=" (2, 0, 2)"];
2 -- 3[label="2", color="red"];
3 -- 4[label="2", color="red"];
1 -- 3[label="4", color="red"];
1 -- 4[label="4" ];
2 -- 4[label="4" ];
1 -- 2[label="5" ];
}
]]></Example>
  </Description>
</ManSection>


<ManSection>
  <Oper Name="DotEliahouGraph" Arg="f"/>
  <Description>
    <C>f</C> is a set of factorizations. 
    Returns the Eliahou graph (in dot) of factorizations associated to <C>f</C>: a graph whose vertices are the elements of <C>f</C>, and there is an edge between two vertices if they have common support. Edges are labelled with distances between nodes they join.
<Example><![CDATA[
gap> f:=FactorizationsIntegerWRTList(20,[3,5,7]);
[ [ 5, 1, 0 ], [ 0, 4, 0 ], [ 1, 2, 1 ], [ 2, 0, 2 ] ]
gap> Print(DotEliahouGraph(f));
graph  NSGraph{
1 [label=" (5, 1, 0)"];
2 [label=" (0, 4, 0)"];
3 [label=" (1, 2, 1)"];
4 [label=" (2, 0, 2)"];
2 -- 3[label="2" ];
3 -- 4[label="2" ];
1 -- 3[label="4" ];
1 -- 4[label="4" ];
1 -- 2[label="5" ];
}
]]></Example>
  </Description>
</ManSection>


<ManSection>
  <Func Name="SetDotNSEngine" Arg="engine"/>
  <Description>
  This function sets the value of <C>DotNSEngine</C> to <C>engine</C>, which must be any of the following "circo","dot","fdp","neato","osage","twopi". This tells viz.js which graphviz engine to use.
<Example><![CDATA[
gap> SetDotNSEngine("circo");
true
]]></Example>

Here is an example with the default dot engine 
      <Alt Only="LaTeX">
        \begin{center}
        \includegraphics[height=4cm]{img/fact-dot.pdf}
        \end{center}
      </Alt>
      <Alt Only="HTML">
        &#60;br&#62;&#60;center&#62;&#60;img src=&#34;img/fact-dot.jpg&#34;&#62;&#60;/center&#62;&#60;br&#62;
      </Alt>

And one with circo engine 
      <Alt Only="LaTeX">
        \begin{center}
        \includegraphics[height=4cm]{img/fact-circo.pdf}
        \end{center}
      </Alt>
      <Alt Only="HTML">
        &#60;br&#62;&#60;center&#62;&#60;img src=&#34;img/fact-circo.jpg&#34;&#62;&#60;/center&#62;&#60;br&#62;
      </Alt>
  </Description>

</ManSection>


<ManSection>
  <Func Name="DotSplash" Arg="[dots]"/>
  <Description>
   Launches a browser and visualizes the dots diagrams provided as arguments. It outputs the html page displayed as a string, and prints the location of the temporary file that contains it.
  </Description>
</ManSection>



</Section>
