<Chapter><Heading>The &lpres; package</Heading> 
This package was written by Ren√© Hartung in 2009; maintenance has been
overtaken by Laurent Bartholdi, who translated the manual to &GAPDoc;.

<Section><Heading>Introduction</Heading>
In 1980, Grigorchuk <Cite Key="Grigorchuk80"/> gave an example of an infinite,
finitely generated torsion group which provided a first explicit
counter-example to the General Burnside Problem. This counter-example
is nowadays called the <E>Grigorchuk group</E> and was originally defined
as a group of transformations of the unit interval which preserve the
Lebesgue measure. Beside being a counter-example to the General Burnside
Problem, the Grigorchuk group was a first example of a group with an
intermediate growth function (see <Cite Key="Grigorchuk83"/>) and was used in
the construction of a finitely presented amenable group which is not
elementary amenable (see <Cite Key="Grigorchuk98"/>).<P/>

The Grigorchuk group is not finitely presentable
(see <Cite Key="Grigorchuk99"/>). However, in 1985, Igor Lysenok
(see <Cite Key="Lysenok85"/>) determined the following recursive presentation
for the Grigorchuk group:
<Display>\langle a,b,c,d\mid a^2,b^2,c^2,d^2,bcd,[d,d^a]^{\sigma^n},[d,d^{acaca}]^{\sigma^n}, (n\in&NN;)\rangle,</Display>
where <M>\sigma</M> is the homomorphism of the free group over
<M>\{a,b,c,d\}</M> which is induced by <M>a\mapsto c^a, b\mapsto d,
c\mapsto b</M>, and <M>d\mapsto c</M>. Hence, the infinitely many
relators of this recursive presentation can be described in finite
terms using powers of the endomorphism <M>\sigma</M>.<P/>

In 2003, Bartholdi <Cite Key="Bartholdi03"/> introduced the notion of an
<E>L-presentation</E> for presentations of this type; that is, a group
presentation of the form
<Display>G=\left\langle S \left|  Q\cup \bigcup_{\varphi\in\Phi^*} R^\varphi\right.\right\rangle,</Display>
where <M>\Phi^*</M> denotes the free monoid generated by a set of free group
endomorphisms <M>\Phi</M>. He proved that various branch groups are finitely
L-presented but not finitely presentable and that every free group
in a variety of groups satisfying finitely many identities is finitely
L-presented (e.g. the Free Burnside- and the Free <M>n</M>-Engel groups).<P/>

The &lpres;-package defines new &GAP; objects to work
with finitely L-presented groups. The main part of the package is a
nilpotent quotient algorithm for finitely L-presented groups; that
is, an algorithm which takes as input a finitelyL-presented group
<M>G</M> and a positive integer <M>c</M>. It computes a polycyclic presentation
for the lower central series quotient <M>G/\gamma_{c+1}(G)</M>.  Therefore,
a nilpotent quotient algorithm can be used to determine the abelian
invariants of the lower central series sections
<M>\gamma_c(G)/\gamma_{c+1}(G)</M> and the largest nilpotent quotient of
<M>G</M> if it exists.<P/>

Our nilpotent quotient algorithm generalizes Nickel's algorithm for
finitely presented groups (see <Cite Key="Nickel96"/>) which is
implemented in the <Package>NQ</Package>-package; see <Cite
Key="nq"/>. In difference to the <Package>NQ</Package>-package, the
&lpres;-package is implemented in &GAP; only.<P/>

Since finite L-presentations generalize finite presentations, our
algorithm also applies to finitely presented groups. It coincides with
Nickel's algorithm in this special case.<P/>

A detailed description of our algorithm can be found in <Cite
Key="BEH08"/> or in the diploma thesis <Cite Key="H08"/>.

Furthermore the &lpres;-package includes the algorithms of <Cite
Key="MR2678952"/> for approximating the Schur multiplier of finitely
L-presented groups.
<!-- and <Cite Key="EH09"/> for the outer automorphism group --><P/>


The &lpres;-package also includes the Reidemeister-Schreier algorithm
from <Cite Key="MR2876891"/>.

L-presented groups were introduced as a tool to understand self-similar
groups such as the Grigorchuk group. As such, &lpres; works in close contact
with the package <Package>fr</Package>. See <Cite Key="MR3133711"/> for more
on the relationships between L-presented groups and self-similar groups.<P/>

Finally, we note that we use the term "algorithm" somewhat loosely:
many of the algorithms in this package are in fact semi-algorithms,
guaranteed to give a correct answer but not guaranteed to terminate.
</Section>
</Chapter>
