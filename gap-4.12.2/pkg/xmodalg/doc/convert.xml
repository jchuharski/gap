<!-- ------------------------------------------------------------------- -->
<!--                                                                     -->
<!--  convert.xml          XModAlg documentation              Z. Arvasi  -->
<!--                                                        & A. Odabas  -->
<!--  Copyright (C) 2014-2021, Z. Arvasi & A. Odabas,                    --> 
<!--  Osmangazi University, Eskisehir, Turkey                            --> 
<!--                                                                     -->
<!-- ------------------------------------------------------------------- -->

<?xml version="1.0" encoding="UTF-8"?>

<Chapter Label="chap-convert">

<Heading>Conversion between cat1-algebras and crossed modules</Heading>

<Section> 

<Heading>Equivalent Categories</Heading> 

The categories <M>\mathbf{Cat1Alg}</M> (cat<M>^{1}</M>-algebras) 
and <M>\mathbf{XModAlg}</M> (crossed modules) 
are naturally equivalent <Cite Key="ellis1"/>.  
This equivalence is outlined in what follows. 
For a given crossed module <M>(\partial : S \rightarrow R)</M> 
we can construct the semidirect product <M>R \ltimes S</M>
thanks to the action of <M>R</M> on <M>S</M>. 
If we define <M>t,h : R \ltimes S \rightarrow R</M> 
and <M>e : R \rightarrow R \ltimes S</M> by 
<Display>
t(r,s) = r, \qquad 
h(r,s) = r + \partial(s), \qquad 
e(r) = (r,0), 
</Display>
respectively, then 
<M>\mathcal{C} = (e;t,h : R \ltimes S \rightarrow R)</M> 
is a cat<M>^{1}-</M>algebra.
<P/> 
Notice that <M>h</M> <E>is</E> an algebra homomorphism, since: 
<Display>
h(r_1r_2,~ r_1 \cdot s_2 + r_2 \cdot s_1 + s_1s_2) 
~=~ 
r_1r_2 + r_1(\partial s_2) + r_2(\partial s_1) + (\partial s_1)(\partial s_2) 
~=~ 
(r_1 + \partial s_1)(r_2 + \partial s_2). 
</Display>
<P/>
Conversely, for a given cat<M>^{1}</M>-algebra 
<M>\mathcal{C}=(e;t,h : A \rightarrow R)</M>, 
the map <M>\partial : \ker t \rightarrow R</M> is a crossed module, 
where the action is multiplication action by <M>eR</M>, and 
<M>\partial</M> is the restriction of <M>h</M> to <M>\ker t</M>. 
<P/> 
Since all of these operations are linked to the functions 
<Ref Oper="Cat1Algebra"/> and <Ref Oper="XModAlgebra"/>, 
they can be performed by calling these two functions. 
We may also use the function <Ref Oper="Cat1Algebra"/> 
instead of the operation <Ref Oper="Cat1AlgebraSelect"/>.

<ManSection>
   <Oper Name="Cat1AlgebraOfXModAlgebra"
         Arg="X0" />
   <Oper Name="PreCat1AlgebraOfPreXModAlgebra"
         Arg="X0" />
<Description> 
These operations are used for constructing a cat<M>^{1}</M>-algebra 
from a given crossed module of algebras. 
As an example we use the crossed module <C>XAB</C> constructed in 
<Ref Oper="XModAlgebraByIdeal"/> 
(The output from <C>Display</C> needs to be improved.) 
</Description>
</ManSection> 

<Example>
<![CDATA[
gap> CAB := Cat1AlgebraOfXModAlgebra( XAB );
[Algebra( GF(5), [ v.1, v.2, v.3, v.4, v.5 ] ) -> A(l,m)]
gap> Display( CAB );

Cat1-algebra [..=>A(l,m)] :- 
:  range algebra has generators:
  
[ 
  [ [ Z(5)^0, 0*Z(5), 0*Z(5) ], [ 0*Z(5), Z(5)^0, 0*Z(5) ], 
      [ 0*Z(5), 0*Z(5), Z(5)^0 ] ], 
  [ [ 0*Z(5), Z(5)^0, Z(5)^3 ], [ 0*Z(5), 0*Z(5), Z(5)^0 ], 
      [ 0*Z(5), 0*Z(5), 0*Z(5) ] ] ]
: tail homomorphism maps source generators to:
: range embedding maps range generators to:
  [ v.1, v.2 ]
: kernel has generators:
  Algebra( GF(5), [ v.4, v.5 ] )
]]>
</Example>

<ManSection>
   <Oper Name="XModAlgebraOfCat1Algebra"
         Arg="C" />
   <Oper Name="PreXModAlgebraOfPreCat1Algebra"
         Arg="C" />
<Description> 
These operations are used for constructing a crossed module of algebras 
from a given cat<M>^{1}</M>-algebra.
</Description>
</ManSection> 

<Example>
<![CDATA[
gap> X3 := XModAlgebraOfCat1Algebra( C3 );
[ <algebra of dimension 3 over GF(2)> -> <algebra of dimension 3 over GF(2)> ]
gap> Display( X3 ); 

Crossed module [..->..] :- 
: Source algebra has generators:
  [ (Z(2)^0)*()+(Z(2)^0)*(4,5), (Z(2)^0)*(1,2,3)+(Z(2)^0)*(1,2,3)(4,5), 
  (Z(2)^0)*(1,3,2)+(Z(2)^0)*(1,3,2)(4,5) ]
: Range algebra has generators:
  [ (Z(2)^0)*(), (Z(2)^0)*(1,2,3) ]
: Boundary homomorphism maps source generators to:
  [ <zero> of ..., <zero> of ..., <zero> of ... ]
]]>
</Example>

</Section>

</Chapter>
