<?xml version="1.0" encoding="UTF-8"?>

<!-- This is an automatically generated file. -->
<Chapter Label="Chapter_Miscellaneous_useful_functions">
<Heading>Miscellaneous useful functions</Heading>

<Section Label="Chapter_Miscellaneous_useful_functions_Section_Predicates_for_representations">
<Heading>Predicates for representations</Heading>

<ManSection>
  <Attr Arg="rho" Name="IsFiniteGroupLinearRepresentation" Label="for IsGroupHomomorphism"/>
 <Returns>true or false
</Returns>
 <Description>
Tells you if <A>rho</A> is a linear representation of
 a finite group. The algorithms implemented in this package work on
 these homomorphisms only.
 </Description>
</ManSection>


<ManSection>
  <Attr Arg="rho" Name="IsFiniteGroupPermutationRepresentation" Label="for IsGroupHomomorphism"/>
 <Returns>true or false
</Returns>
 <Description>
Tells you if <A>rho</A> is a homomorphism from a
 finite group to a permutation group.
 </Description>
</ManSection>


</Section>


<Section Label="Chapter_Miscellaneous_useful_functions_Section_Efficient_summing_over_groups">
<Heading>Efficient summing over groups</Heading>

<ManSection>
  <Func Arg="G, summand" Name="GroupSumBSGS" />
 <Returns><Math>\sum_{g \in G} \mbox{summand}(g)</Math>
</Returns>
 <Description>
Uses a basic stabiliser chain for <Math>G</Math> to compute the
 sum described above. This trick requires <A>summand</A> to be a
 function (in the GAP sense) that defines a monoid homomorphism (in
 the mathematical sense). The computation of the stabiliser chain
 assumes <A>G</A> is a group.
 More precisely, if we have the basic stabiliser chain:
 <Display>\{1\} = G_1 \leq \ldots \leq G_n = G</Display>
 We traverse the chain from <Math>G_1</Math> to <Math>G_n</Math>, using the previous sum
 <Math>G_{i-1}</Math> to build the sum <Math>G_i</Math>. We do this by using the fact
 that (writing <Math>f</Math> for <A>summand</A>)
 <Display>\sum_{g \in G_i} f(g) = \sum_{r_j} \left(\sum_{h \in G_{i-1}} f(h)\right) f(r_j)</Display>
 where the <Math>r_j</Math> are right coset representatives of <Math>G_{i-1}</Math> in
 <Math>G_i</Math>.
 The condition on <A>summand</A> is satisfied if, for example, it is
 a linear representation of a group <A>G</A>.
 </Description>
</ManSection>


</Section>


<Section Label="Chapter_Miscellaneous_useful_functions_Section_Space-efficient_representation_of_tensors_of_matrices">
<Heading>Space-efficient representation of tensors of matrices</Heading>

 Suppose we have representations of <Math>G</Math>, <Math>\rho</Math> and <Math>\tau</Math>, with
 degree <Math>n</Math> and <Math>m</Math>. If we would like to construct the tensor
 product representation of <Math>G</Math>, <Math>\rho \otimes \tau</Math>, the usual way
 to do it would be to take the Kronecker product of the
 matrices. This means we now have to store very large <Math>nm \times nm</Math>
 matrices for each generator of <Math>G</Math>.
 This can be avoided by storing the tensor of matrices as pairs,
 essentially storing <Math>A \otimes B</Math> as a pair <Math>(A,B)</Math> and
 implementing group operations on top of these, along with some
 representation-theoretic functions.
 It is only possible to guarantee an economical representation for
 pure tensors, i.e. matrices of the form <Math>A \otimes B</Math>. These are
 closed under group operations, so it is natural to define a group
 structure.
<ManSection>
  <Filt Arg="arg" Name="IsTensorProductOfMatricesObj" Label="for IsMultiplicativeElementWithInverse"/>
 <Returns><C>true</C> or <C>false</C>
</Returns>
 <Description>
<P/>
 </Description>
</ManSection>


 Position <Math>i</Math> in this representation stores the matrix <Math>A_i</Math> in the
 tensor product <Math>A_1 \otimes A_2</Math>.
<ManSection>
  <Filt Arg="arg" Name="IsTensorProductPairRep" Label="for IsPositionalObjectRep"/>
 <Returns><C>true</C> or <C>false</C>
</Returns>
 <Description>
<P/>
 </Description>
</ManSection>


 Position 1 stores the full Kronecker product of the matrices, this
 is very space inefficient and supposed to be used as a last resort.
<ManSection>
  <Filt Arg="arg" Name="IsTensorProductKroneckerRep" Label="for IsPositionalObjectRep"/>
 <Returns><C>true</C> or <C>false</C>
</Returns>
 <Description>
<P/>
 </Description>
</ManSection>


 More convenient constructor for a tensor product (automatically
 handles family)
<ManSection>
  <Func Arg="arg" Name="TensorProductOfMatrices" />
 <Description>
<P/>
 </Description>
</ManSection>


 This uses the multiplicativity of characters when taking tensor
 products to avoid having to compute the trace of a big matrix.
<ManSection>
  <Func Arg="arg" Name="CharacterOfTensorProductOfRepresentations" />
 <Description>
<P/>
 </Description>
</ManSection>


</Section>


<Section Label="Chapter_Miscellaneous_useful_functions_Section_Matrices_and_homomorphisms">
<Heading>Matrices and homomorphisms</Heading>

<ManSection>
  <Func Arg="hom, func" Name="ComposeHomFunction" />
 <Returns>Homomorphism g given by g(x) = func(hom(x)).
</Returns>
 <Description>
This is mainly for convenience, since it handles all
 GAP accounting issues regarding the range, ByImages vs ByFunction,
 etc.
 </Description>
</ManSection>


</Section>


<Section Label="Chapter_Miscellaneous_useful_functions_Section_Representation_theoretic_functions">
<Heading>Representation theoretic functions</Heading>

<ManSection>
  <Func Arg="list1, list2" Name="TensorProductRepLists" />
 <Returns>All possible tensor products given by <Math>\rho \otimes \tau</Math>  where <Math>\rho : G \to \mbox{GL}(V)</Math> is taken from <A>list1</A> and
  <Math>\tau : H \to \mbox{GL}(W)</Math> is taken from <A>list2</A>. The result
  is then a list of representations of <Math>G \times H</Math>.
</Returns>
 <Description>
<P/>
 </Description>
</ManSection>


<ManSection>
  <Func Arg="list" Name="DirectSumOfRepresentations" />
 <Returns>Direct sum of the list of representations <A>list</A>
</Returns>
 <Description>
<P/>
 </Description>
</ManSection>


<ManSection>
  <Func Arg="rho" Name="DegreeOfRepresentation" />
 <Returns>Degree of the representation <A>rho</A>. That is,  <Math>\mbox{Tr}(\rho(e_G))</Math>, where <Math>e_G</Math> is the identity of the group
  <Math>G</Math> that <A>rho</A> has as domain.
</Returns>
 <Description>
<P/>
 </Description>
</ManSection>


<ManSection>
  <Func Arg="rho" Name="PermToLinearRep" />
 <Returns>Linear representation <Math>\rho</Math> isomorphic to the permutation  representation <A>rho</A>.
</Returns>
 <Description>
<P/>
 </Description>
</ManSection>


<ManSection>
  <Func Arg="S, prod" Name="IsOrthonormalSet" />
 <Returns>Whether <A>S</A> is an orthonormal set with respect to the  inner product <A>prod</A>.
</Returns>
 <Description>
<P/>
 </Description>
</ManSection>


</Section>


</Chapter>

