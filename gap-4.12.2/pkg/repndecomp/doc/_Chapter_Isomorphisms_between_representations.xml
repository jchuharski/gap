<?xml version="1.0" encoding="UTF-8"?>

<!-- This is an automatically generated file. -->
<Chapter Label="Chapter_Isomorphisms_between_representations">
<Heading>Isomorphisms between representations</Heading>

<Section Label="Chapter_Isomorphisms_between_representations_Section_Finding_explicit_isomorphisms">
<Heading>Finding explicit isomorphisms</Heading>

<ManSection>
  <Func Arg="rho, tau[, rho_cent_basis, tau_cent_basis]" Name="LinearRepresentationIsomorphism" />
 <Returns>A matrix <Math>A</Math> or fail
</Returns>
 <Description>
Let <Math>\rho : G \to GL(V)</Math> and <Math>\tau : G \to GL(W)</Math>. If
 there exists a linear map <Math>A : V \to W</Math> such that for all <Math>g \in
 G</Math>, <Math>\tau(g)A = A\rho(g)</Math>, this function returns one such <Math>A</Math>. <Math>A</Math>
 is the isomorphism between the representations. If the
 representations are not isomorphic, then fail is returned.
<P/>
 There are three methods that we can use to compute an isomorphism
 of linear representations, you can select one by passing options to
 the function.
<P/>
<List>
<Item>
<Code>use_kronecker</Code>: Assumes the matrices are small enough that their
   Kronecker products can fit into memory. Uses <Ref
   Func="GroupSumBSGS" /> and <Code>KroneckerProduct</Code> to compute an
   element of the fixed subspace of <Math>\rho \otimes \tau^*</Math>.
</Item>
</List>
<P/>
<List>
<Item>
<Code>use_orbit_sum</Code>: Finds an isomorphism by summing orbits of the
   the action of <Math>\rho \otimes \tau^*</Math> on matrices. Note that orbits
   could be very large, so this could be as bad as summing over the
   whole group.
</Item>
</List>
<P/>
<List>
<Item>
The default, sums over the whole group to compute the projection
   onto the fixed subspace.
</Item>
</List>
<P/>
 <P/>
<#Include Label="Example_LinearRepresentationIsomorphism">

 <P/>
 </Description>
</ManSection>


<ManSection>
  <Func Arg="rho, tau" Name="LinearRepresentationIsomorphismSlow" />
 <Returns>A matrix <Math>A</Math> or fail
</Returns>
 <Description>
Gives the same result as <Ref
 Func="LinearRepresentationIsomorphism" />, but this function uses a
 simpler method which always involves summing over <Math>G</Math>, without
 using <Ref Func="GroupSumBSGS" />. This might be useful in some
 cases if computing a good BSGS is difficult. However, for all cases
 that have been tested, it is slow (as the name suggests).
<P/>
 <P/>
<#Include Label="Example_LinearRepresentationIsomorphismSlow">

 <P/>
 </Description>
</ManSection>


</Section>


<Section Label="Chapter_Isomorphisms_between_representations_Section_Testing_isomorphisms">
<Heading>Testing isomorphisms</Heading>

<ManSection>
  <Func Arg="rho, tau" Name="AreRepsIsomorphic" />
 <Returns>true if <A>rho</A> and <A>tau</A> are isomorphic as  representations, false otherwise.
</Returns>
 <Description>
Since representations of finite groups over <Math>\mathbb{C}</Math> are
 determined by their characters, it is easy to check whether two
 representations are isomorphic by checking if they have the same
 character. We try to use characters wherever possible.
 <P/>
<#Include Label="Example_AreRepsIsomorphic">

 <P/>
 </Description>
</ManSection>


<ManSection>
  <Func Arg="A, rho, tau" Name="IsLinearRepresentationIsomorphism" />
 <Returns>true if <A>rho</A> and <A>tau</A> are isomorphic as as  representations with the isomorphism given by the linear map
  <A>A</A>
</Returns>
 <Description>
This function tests if, for all <Math>g \in G</Math>, <Math>A \rho(g)
 = \tau(g) A</Math>. That is, true is returned iff <Math>A</Math> is the intertwining
 operator taking <Math>\rho</Math> to <Math>\tau</Math>.
 that:
 <P/>
<#Include Label="Example_IsLinearRepresentationIsomorphism">

 <P/>
 </Description>
</ManSection>


</Section>


</Chapter>

